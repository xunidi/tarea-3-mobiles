{"ast":null,"code":"function declensionGroup(scheme, count) {\n  if (count === 1) {\n    return scheme.one;\n  }\n\n  if (count >= 2 && count <= 4) {\n    return scheme.twoFour;\n  } // if count === null || count === 0 || count >= 5\n\n\n  return scheme.other;\n}\n\nfunction declension(scheme, count, time) {\n  var group = declensionGroup(scheme, count);\n  var finalText = group[time] || group;\n  return finalText.replace('{{count}}', count);\n}\n\nfunction extractPreposition(token) {\n  var result = ['lessThan', 'about', 'over', 'almost'].filter(function (preposition) {\n    return !!token.match(new RegExp('^' + preposition));\n  });\n  return result[0];\n}\n\nfunction prefixPreposition(preposition) {\n  var translation = '';\n\n  if (preposition === 'almost') {\n    translation = 'skoro';\n  }\n\n  if (preposition === 'about') {\n    translation = 'přibližně';\n  }\n\n  return translation.length > 0 ? translation + ' ' : '';\n}\n\nfunction suffixPreposition(preposition) {\n  var translation = '';\n\n  if (preposition === 'lessThan') {\n    translation = 'méně než';\n  }\n\n  if (preposition === 'over') {\n    translation = 'více než';\n  }\n\n  return translation.length > 0 ? translation + ' ' : '';\n}\n\nfunction lowercaseFirstLetter(string) {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\nvar formatDistanceLocale = {\n  xSeconds: {\n    one: {\n      regular: 'vteřina',\n      past: 'vteřinou',\n      future: 'vteřinu'\n    },\n    twoFour: {\n      regular: '{{count}} vteřiny',\n      past: '{{count}} vteřinami',\n      future: '{{count}} vteřiny'\n    },\n    other: {\n      regular: '{{count}} vteřin',\n      past: '{{count}} vteřinami',\n      future: '{{count}} vteřin'\n    }\n  },\n  halfAMinute: {\n    other: {\n      regular: 'půl minuty',\n      past: 'půl minutou',\n      future: 'půl minuty'\n    }\n  },\n  xMinutes: {\n    one: {\n      regular: 'minuta',\n      past: 'minutou',\n      future: 'minutu'\n    },\n    twoFour: {\n      regular: '{{count}} minuty',\n      past: '{{count}} minutami',\n      future: '{{count}} minuty'\n    },\n    other: {\n      regular: '{{count}} minut',\n      past: '{{count}} minutami',\n      future: '{{count}} minut'\n    }\n  },\n  xHours: {\n    one: {\n      regular: 'hodina',\n      past: 'hodinou',\n      future: 'hodinu'\n    },\n    twoFour: {\n      regular: '{{count}} hodiny',\n      past: '{{count}} hodinami',\n      future: '{{count}} hodiny'\n    },\n    other: {\n      regular: '{{count}} hodin',\n      past: '{{count}} hodinami',\n      future: '{{count}} hodin'\n    }\n  },\n  xDays: {\n    one: {\n      regular: 'den',\n      past: 'dnem',\n      future: 'den'\n    },\n    twoFour: {\n      regular: '{{count}} dni',\n      past: '{{count}} dny',\n      future: '{{count}} dni'\n    },\n    other: {\n      regular: '{{count}} dní',\n      past: '{{count}} dny',\n      future: '{{count}} dní'\n    }\n  },\n  xMonths: {\n    one: {\n      regular: 'měsíc',\n      past: 'měsícem',\n      future: 'měsíc'\n    },\n    twoFour: {\n      regular: '{{count}} měsíce',\n      past: '{{count}} měsíci',\n      future: '{{count}} měsíce'\n    },\n    other: {\n      regular: '{{count}} měsíců',\n      past: '{{count}} měsíci',\n      future: '{{count}} měsíců'\n    }\n  },\n  xYears: {\n    one: {\n      regular: 'rok',\n      past: 'rokem',\n      future: 'rok'\n    },\n    twoFour: {\n      regular: '{{count}} roky',\n      past: '{{count}} roky',\n      future: '{{count}} roky'\n    },\n    other: {\n      regular: '{{count}} roků',\n      past: '{{count}} roky',\n      future: '{{count}} roků'\n    }\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var preposition = extractPreposition(token) || '';\n  var key = lowercaseFirstLetter(token.substring(preposition.length));\n  var scheme = formatDistanceLocale[key];\n\n  if (!options.addSuffix) {\n    return prefixPreposition(preposition) + suffixPreposition(preposition) + declension(scheme, count, 'regular');\n  }\n\n  if (options.comparison > 0) {\n    return prefixPreposition(preposition) + 'za ' + suffixPreposition(preposition) + declension(scheme, count, 'future');\n  } else {\n    return prefixPreposition(preposition) + 'před ' + suffixPreposition(preposition) + declension(scheme, count, 'past');\n  }\n}","map":null,"metadata":{},"sourceType":"module"}