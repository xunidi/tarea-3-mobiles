{"ast":null,"code":"var patterns = {\n  'M': /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  'D': /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  'DDD': /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  'W': /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  'YYYY': /^(\\d{1,4})/,\n  // 0 to 9999\n  'H': /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  'm': /^([0-5]?\\d)/,\n  // 0 to 59\n  'Z': /^([+-])(\\d{2}):(\\d{2})/,\n  'ZZ': /^([+-])(\\d{2})(\\d{2})/,\n  singleDigit: /^(\\d)/,\n  twoDigits: /^(\\d{2})/,\n  threeDigits: /^(\\d{3})/,\n  fourDigits: /^(\\d{4})/,\n  anyDigits: /^(\\d+)/\n};\n\nfunction parseDecimal(matchResult) {\n  return parseInt(matchResult[1], 10);\n}\n\nvar parsers = {\n  // Year: 00, 01, ..., 99\n  'YY': {\n    unit: 'twoDigitYear',\n    match: patterns.twoDigits,\n    parse: function (matchResult) {\n      return parseDecimal(matchResult);\n    }\n  },\n  // Year: 1900, 1901, ..., 2099\n  'YYYY': {\n    unit: 'year',\n    match: patterns.YYYY,\n    parse: parseDecimal\n  },\n  // ISO week-numbering year: 00, 01, ..., 99\n  'GG': {\n    unit: 'isoYear',\n    match: patterns.twoDigits,\n    parse: function (matchResult) {\n      return parseDecimal(matchResult) + 1900;\n    }\n  },\n  // ISO week-numbering year: 1900, 1901, ..., 2099\n  'GGGG': {\n    unit: 'isoYear',\n    match: patterns.YYYY,\n    parse: parseDecimal\n  },\n  // Quarter: 1, 2, 3, 4\n  'Q': {\n    unit: 'quarter',\n    match: patterns.singleDigit,\n    parse: parseDecimal\n  },\n  // Ordinal quarter\n  'Qo': {\n    unit: 'quarter',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {\n        unit: 'quarter'\n      });\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {\n        unit: 'quarter'\n      });\n    }\n  },\n  // Month: 1, 2, ..., 12\n  'M': {\n    unit: 'month',\n    match: patterns.M,\n    parse: function (matchResult) {\n      return parseDecimal(matchResult) - 1;\n    }\n  },\n  // Ordinal month\n  'Mo': {\n    unit: 'month',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {\n        unit: 'month'\n      });\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {\n        unit: 'month'\n      }) - 1;\n    }\n  },\n  // Month: 01, 02, ..., 12\n  'MM': {\n    unit: 'month',\n    match: patterns.twoDigits,\n    parse: function (matchResult) {\n      return parseDecimal(matchResult) - 1;\n    }\n  },\n  // Month: Jan, Feb, ..., Dec\n  'MMM': {\n    unit: 'month',\n    match: function (string, options) {\n      return options.locale.match.months(string, {\n        type: 'short'\n      });\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.month(matchResult, {\n        type: 'short'\n      });\n    }\n  },\n  // Month: January, February, ..., December\n  'MMMM': {\n    unit: 'month',\n    match: function (string, options) {\n      return options.locale.match.months(string, {\n        type: 'long'\n      }) || options.locale.match.months(string, {\n        type: 'short'\n      });\n    },\n    parse: function (matchResult, options) {\n      var parseResult = options.locale.match.month(matchResult, {\n        type: 'long'\n      });\n\n      if (parseResult == null) {\n        parseResult = options.locale.match.month(matchResult, {\n          type: 'short'\n        });\n      }\n\n      return parseResult;\n    }\n  },\n  // ISO week: 1, 2, ..., 53\n  'W': {\n    unit: 'isoWeek',\n    match: patterns.W,\n    parse: parseDecimal\n  },\n  // Ordinal ISO week\n  'Wo': {\n    unit: 'isoWeek',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {\n        unit: 'isoWeek'\n      });\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {\n        unit: 'isoWeek'\n      });\n    }\n  },\n  // ISO week: 01, 02, ..., 53\n  'WW': {\n    unit: 'isoWeek',\n    match: patterns.twoDigits,\n    parse: parseDecimal\n  },\n  // Day of week: 0, 1, ..., 6\n  'd': {\n    unit: 'dayOfWeek',\n    match: patterns.singleDigit,\n    parse: parseDecimal\n  },\n  // Ordinal day of week\n  'do': {\n    unit: 'dayOfWeek',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {\n        unit: 'dayOfWeek'\n      });\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {\n        unit: 'dayOfWeek'\n      });\n    }\n  },\n  // Day of week: Su, Mo, ..., Sa\n  'dd': {\n    unit: 'dayOfWeek',\n    match: function (string, options) {\n      return options.locale.match.weekdays(string, {\n        type: 'narrow'\n      });\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.weekday(matchResult, {\n        type: 'narrow'\n      });\n    }\n  },\n  // Day of week: Sun, Mon, ..., Sat\n  'ddd': {\n    unit: 'dayOfWeek',\n    match: function (string, options) {\n      return options.locale.match.weekdays(string, {\n        type: 'short'\n      }) || options.locale.match.weekdays(string, {\n        type: 'narrow'\n      });\n    },\n    parse: function (matchResult, options) {\n      var parseResult = options.locale.match.weekday(matchResult, {\n        type: 'short'\n      });\n\n      if (parseResult == null) {\n        parseResult = options.locale.match.weekday(matchResult, {\n          type: 'narrow'\n        });\n      }\n\n      return parseResult;\n    }\n  },\n  // Day of week: Sunday, Monday, ..., Saturday\n  'dddd': {\n    unit: 'dayOfWeek',\n    match: function (string, options) {\n      return options.locale.match.weekdays(string, {\n        type: 'long'\n      }) || options.locale.match.weekdays(string, {\n        type: 'short'\n      }) || options.locale.match.weekdays(string, {\n        type: 'narrow'\n      });\n    },\n    parse: function (matchResult, options) {\n      var parseResult = options.locale.match.weekday(matchResult, {\n        type: 'long'\n      });\n\n      if (parseResult == null) {\n        parseResult = options.locale.match.weekday(matchResult, {\n          type: 'short'\n        });\n\n        if (parseResult == null) {\n          parseResult = options.locale.match.weekday(matchResult, {\n            type: 'narrow'\n          });\n        }\n      }\n\n      return parseResult;\n    }\n  },\n  // Day of ISO week: 1, 2, ..., 7\n  'E': {\n    unit: 'dayOfISOWeek',\n    match: patterns.singleDigit,\n    parse: function (matchResult) {\n      return parseDecimal(matchResult);\n    }\n  },\n  // Day of month: 1, 2, ..., 31\n  'D': {\n    unit: 'dayOfMonth',\n    match: patterns.D,\n    parse: parseDecimal\n  },\n  // Ordinal day of month\n  'Do': {\n    unit: 'dayOfMonth',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {\n        unit: 'dayOfMonth'\n      });\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {\n        unit: 'dayOfMonth'\n      });\n    }\n  },\n  // Day of month: 01, 02, ..., 31\n  'DD': {\n    unit: 'dayOfMonth',\n    match: patterns.twoDigits,\n    parse: parseDecimal\n  },\n  // Day of year: 1, 2, ..., 366\n  'DDD': {\n    unit: 'dayOfYear',\n    match: patterns.DDD,\n    parse: parseDecimal\n  },\n  // Ordinal day of year\n  'DDDo': {\n    unit: 'dayOfYear',\n    match: function (string, options) {\n      return options.locale.match.ordinalNumbers(string, {\n        unit: 'dayOfYear'\n      });\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.ordinalNumber(matchResult, {\n        unit: 'dayOfYear'\n      });\n    }\n  },\n  // Day of year: 001, 002, ..., 366\n  'DDDD': {\n    unit: 'dayOfYear',\n    match: patterns.threeDigits,\n    parse: parseDecimal\n  },\n  // AM, PM\n  'A': {\n    unit: 'timeOfDay',\n    match: function (string, options) {\n      return options.locale.match.timesOfDay(string, {\n        type: 'short'\n      });\n    },\n    parse: function (matchResult, options) {\n      return options.locale.match.timeOfDay(matchResult, {\n        type: 'short'\n      });\n    }\n  },\n  // a.m., p.m.\n  'aa': {\n    unit: 'timeOfDay',\n    match: function (string, options) {\n      return options.locale.match.timesOfDay(string, {\n        type: 'long'\n      }) || options.locale.match.timesOfDay(string, {\n        type: 'short'\n      });\n    },\n    parse: function (matchResult, options) {\n      var parseResult = options.locale.match.timeOfDay(matchResult, {\n        type: 'long'\n      });\n\n      if (parseResult == null) {\n        parseResult = options.locale.match.timeOfDay(matchResult, {\n          type: 'short'\n        });\n      }\n\n      return parseResult;\n    }\n  },\n  // Hour: 0, 1, ... 23\n  'H': {\n    unit: 'hours',\n    match: patterns.H,\n    parse: parseDecimal\n  },\n  // Hour: 00, 01, ..., 23\n  'HH': {\n    unit: 'hours',\n    match: patterns.twoDigits,\n    parse: parseDecimal\n  },\n  // Hour: 1, 2, ..., 12\n  'h': {\n    unit: 'timeOfDayHours',\n    match: patterns.M,\n    parse: parseDecimal\n  },\n  // Hour: 01, 02, ..., 12\n  'hh': {\n    unit: 'timeOfDayHours',\n    match: patterns.twoDigits,\n    parse: parseDecimal\n  },\n  // Minute: 0, 1, ..., 59\n  'm': {\n    unit: 'minutes',\n    match: patterns.m,\n    parse: parseDecimal\n  },\n  // Minute: 00, 01, ..., 59\n  'mm': {\n    unit: 'minutes',\n    match: patterns.twoDigits,\n    parse: parseDecimal\n  },\n  // Second: 0, 1, ..., 59\n  's': {\n    unit: 'seconds',\n    match: patterns.m,\n    parse: parseDecimal\n  },\n  // Second: 00, 01, ..., 59\n  'ss': {\n    unit: 'seconds',\n    match: patterns.twoDigits,\n    parse: parseDecimal\n  },\n  // 1/10 of second: 0, 1, ..., 9\n  'S': {\n    unit: 'milliseconds',\n    match: patterns.singleDigit,\n    parse: function (matchResult) {\n      return parseDecimal(matchResult) * 100;\n    }\n  },\n  // 1/100 of second: 00, 01, ..., 99\n  'SS': {\n    unit: 'milliseconds',\n    match: patterns.twoDigits,\n    parse: function (matchResult) {\n      return parseDecimal(matchResult) * 10;\n    }\n  },\n  // Millisecond: 000, 001, ..., 999\n  'SSS': {\n    unit: 'milliseconds',\n    match: patterns.threeDigits,\n    parse: parseDecimal\n  },\n  // Timezone: -01:00, +00:00, ... +12:00\n  'Z': {\n    unit: 'timezone',\n    match: patterns.Z,\n    parse: function (matchResult) {\n      var sign = matchResult[1];\n      var hours = parseInt(matchResult[2], 10);\n      var minutes = parseInt(matchResult[3], 10);\n      var absoluteOffset = hours * 60 + minutes;\n      return sign === '+' ? absoluteOffset : -absoluteOffset;\n    }\n  },\n  // Timezone: -0100, +0000, ... +1200\n  'ZZ': {\n    unit: 'timezone',\n    match: patterns.ZZ,\n    parse: function (matchResult) {\n      var sign = matchResult[1];\n      var hours = parseInt(matchResult[2], 10);\n      var minutes = parseInt(matchResult[3], 10);\n      var absoluteOffset = hours * 60 + minutes;\n      return sign === '+' ? absoluteOffset : -absoluteOffset;\n    }\n  },\n  // Seconds timestamp: 512969520\n  'X': {\n    unit: 'timestamp',\n    match: patterns.anyDigits,\n    parse: function (matchResult) {\n      return parseDecimal(matchResult) * 1000;\n    }\n  },\n  // Milliseconds timestamp: 512969520900\n  'x': {\n    unit: 'timestamp',\n    match: patterns.anyDigits,\n    parse: parseDecimal\n  }\n};\nparsers['a'] = parsers['A'];\nexport default parsers;","map":null,"metadata":{},"sourceType":"module"}