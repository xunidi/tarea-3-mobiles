{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _DayCell = require('./DayCell.js');\n\nvar _Month = require('./Month.js');\n\nvar _Month2 = _interopRequireDefault(_Month);\n\nvar _utils = require('../utils');\n\nvar _classnames3 = require('classnames');\n\nvar _classnames4 = _interopRequireDefault(_classnames3);\n\nvar _reactList = require('react-list');\n\nvar _reactList2 = _interopRequireDefault(_reactList);\n\nvar _max = require('date-fns/max');\n\nvar _max2 = _interopRequireDefault(_max);\n\nvar _min = require('date-fns/min');\n\nvar _min2 = _interopRequireDefault(_min);\n\nvar _differenceInDays = require('date-fns/differenceInDays');\n\nvar _differenceInDays2 = _interopRequireDefault(_differenceInDays);\n\nvar _isSameMonth = require('date-fns/isSameMonth');\n\nvar _isSameMonth2 = _interopRequireDefault(_isSameMonth);\n\nvar _addDays = require('date-fns/addDays');\n\nvar _addDays2 = _interopRequireDefault(_addDays);\n\nvar _endOfMonth = require('date-fns/endOfMonth');\n\nvar _endOfMonth2 = _interopRequireDefault(_endOfMonth);\n\nvar _startOfMonth = require('date-fns/startOfMonth');\n\nvar _startOfMonth2 = _interopRequireDefault(_startOfMonth);\n\nvar _differenceInCalendarMonths = require('date-fns/differenceInCalendarMonths');\n\nvar _differenceInCalendarMonths2 = _interopRequireDefault(_differenceInCalendarMonths);\n\nvar _setMonth2 = require('date-fns/setMonth');\n\nvar _setMonth3 = _interopRequireDefault(_setMonth2);\n\nvar _setYear2 = require('date-fns/setYear');\n\nvar _setYear3 = _interopRequireDefault(_setYear2);\n\nvar _addYears = require('date-fns/addYears');\n\nvar _addYears2 = _interopRequireDefault(_addYears);\n\nvar _isSameDay = require('date-fns/isSameDay');\n\nvar _isSameDay2 = _interopRequireDefault(_isSameDay);\n\nvar _endOfWeek = require('date-fns/endOfWeek');\n\nvar _endOfWeek2 = _interopRequireDefault(_endOfWeek);\n\nvar _startOfWeek = require('date-fns/startOfWeek');\n\nvar _startOfWeek2 = _interopRequireDefault(_startOfWeek);\n\nvar _eachDayOfInterval = require('date-fns/eachDayOfInterval');\n\nvar _eachDayOfInterval2 = _interopRequireDefault(_eachDayOfInterval);\n\nvar _format = require('date-fns/format');\n\nvar _format2 = _interopRequireDefault(_format);\n\nvar _addMonths = require('date-fns/addMonths');\n\nvar _addMonths2 = _interopRequireDefault(_addMonths);\n\nvar _enUS = require('date-fns/locale/en-US');\n\nvar _enUS2 = _interopRequireDefault(_enUS);\n\nvar _styles = require('../styles');\n\nvar _styles2 = _interopRequireDefault(_styles);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Calendar = function (_PureComponent) {\n  _inherits(Calendar, _PureComponent);\n\n  function Calendar(props, context) {\n    _classCallCheck(this, Calendar);\n\n    var _this = _possibleConstructorReturn(this, (Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call(this, props, context));\n\n    _this.changeShownDate = _this.changeShownDate.bind(_this);\n    _this.focusToDate = _this.focusToDate.bind(_this);\n    _this.updateShownDate = _this.updateShownDate.bind(_this);\n    _this.handleRangeFocusChange = _this.handleRangeFocusChange.bind(_this);\n    _this.renderDateDisplay = _this.renderDateDisplay.bind(_this);\n    _this.onDragSelectionStart = _this.onDragSelectionStart.bind(_this);\n    _this.onDragSelectionEnd = _this.onDragSelectionEnd.bind(_this);\n    _this.onDragSelectionMove = _this.onDragSelectionMove.bind(_this);\n    _this.renderMonthAndYear = _this.renderMonthAndYear.bind(_this);\n    _this.updatePreview = _this.updatePreview.bind(_this);\n    _this.estimateMonthSize = _this.estimateMonthSize.bind(_this);\n    _this.handleScroll = _this.handleScroll.bind(_this);\n    _this.dateOptions = {\n      locale: props.locale\n    };\n    _this.styles = (0, _utils.generateStyles)([_styles2.default, props.classNames]);\n    _this.listSizeCache = {};\n    _this.state = {\n      focusedDate: (0, _utils.calcFocusDate)(null, props),\n      drag: {\n        status: false,\n        range: {\n          startDate: null,\n          endDate: null\n        },\n        disablePreview: false\n      },\n      scrollArea: _this.calcScrollArea(props)\n    };\n    return _this;\n  }\n\n  _createClass(Calendar, [{\n    key: 'calcScrollArea',\n    value: function calcScrollArea(props) {\n      var direction = props.direction,\n          months = props.months,\n          scroll = props.scroll;\n      if (!scroll.enabled) return {\n        enabled: false\n      };\n      var longMonthHeight = scroll.longMonthHeight || scroll.monthHeight;\n\n      if (direction === 'vertical') {\n        return {\n          enabled: true,\n          monthHeight: scroll.monthHeight || 220,\n          longMonthHeight: longMonthHeight || 260,\n          calendarWidth: 'auto',\n          calendarHeight: (scroll.calendarHeight || longMonthHeight || 240) * months\n        };\n      }\n\n      return {\n        enabled: true,\n        monthWidth: scroll.monthWidth || 332,\n        calendarWidth: (scroll.calendarWidth || scroll.monthWidth || 332) * months,\n        monthHeight: longMonthHeight || 300,\n        calendarHeight: longMonthHeight || 300\n      };\n    }\n  }, {\n    key: 'focusToDate',\n    value: function focusToDate(date) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;\n      var preventUnnecessary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      if (!props.scroll.enabled) {\n        this.setState({\n          focusedDate: date\n        });\n        return;\n      }\n\n      var targetMonthIndex = (0, _differenceInCalendarMonths2.default)(date, props.minDate, this.dateOptions);\n      var visibleMonths = this.list.getVisibleRange();\n      if (preventUnnecessary && visibleMonths.includes(targetMonthIndex)) return;\n      this.list.scrollTo(targetMonthIndex);\n      this.setState({\n        focusedDate: date\n      });\n    }\n  }, {\n    key: 'updateShownDate',\n    value: function updateShownDate() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var newProps = props.scroll.enabled ? _extends({}, props, {\n        months: this.list.getVisibleRange().length\n      }) : props;\n      var newFocus = (0, _utils.calcFocusDate)(this.state.focusedDate, newProps);\n      this.focusToDate(newFocus, newProps);\n    }\n  }, {\n    key: 'updatePreview',\n    value: function updatePreview(val) {\n      if (!val) {\n        this.setState({\n          preview: null\n        });\n        return;\n      }\n\n      var preview = {\n        startDate: val,\n        endDate: val,\n        color: this.props.color\n      };\n      this.setState({\n        preview: preview\n      });\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.scroll.enabled) {\n        // prevent react-list's initial render focus problem\n        setTimeout(function () {\n          return _this2.focusToDate(_this2.state.focusedDate);\n        }, 1);\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var propMapper = {\n        dateRange: 'ranges',\n        date: 'date'\n      };\n      var targetProp = propMapper[nextProps.displayMode];\n\n      if (this.props.locale !== nextProps.locale) {\n        this.dateOptions = {\n          locale: nextProps.locale\n        };\n      }\n\n      if (JSON.stringify(this.props.scroll) !== JSON.stringify(nextProps.scroll)) {\n        this.setState({\n          scrollArea: this.calcScrollArea(nextProps)\n        });\n      }\n\n      if (nextProps[targetProp] !== this.props[targetProp]) {\n        this.updateShownDate(nextProps);\n      }\n    }\n  }, {\n    key: 'changeShownDate',\n    value: function changeShownDate(value) {\n      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'set';\n      var focusedDate = this.state.focusedDate;\n      var _props = this.props,\n          onShownDateChange = _props.onShownDateChange,\n          minDate = _props.minDate,\n          maxDate = _props.maxDate;\n      var modeMapper = {\n        monthOffset: function monthOffset() {\n          return (0, _addMonths2.default)(focusedDate, value);\n        },\n        setMonth: function setMonth() {\n          return (0, _setMonth3.default)(focusedDate, value);\n        },\n        setYear: function setYear() {\n          return (0, _setYear3.default)(focusedDate, value);\n        },\n        set: function set() {\n          return value;\n        }\n      };\n      var newDate = (0, _min2.default)([(0, _max2.default)([modeMapper[mode](), minDate]), maxDate]);\n      this.focusToDate(newDate, this.props, false);\n      onShownDateChange && onShownDateChange(newDate);\n    }\n  }, {\n    key: 'handleRangeFocusChange',\n    value: function handleRangeFocusChange(rangesIndex, rangeItemIndex) {\n      this.props.onRangeFocusChange && this.props.onRangeFocusChange([rangesIndex, rangeItemIndex]);\n    }\n  }, {\n    key: 'handleScroll',\n    value: function handleScroll() {\n      var _props2 = this.props,\n          onShownDateChange = _props2.onShownDateChange,\n          minDate = _props2.minDate;\n      var visibleMonths = this.list.getVisibleRange(); // prevent scroll jump with wrong visible value\n\n      if (visibleMonths[0] === undefined) return;\n      var visibleMonth = (0, _addMonths2.default)(minDate, visibleMonths[0] || 0);\n      var isFocusedToDifferent = !(0, _isSameMonth2.default)(visibleMonth, this.state.focusedDate);\n\n      if (isFocusedToDifferent) {\n        this.setState({\n          focusedDate: visibleMonth\n        });\n        onShownDateChange && onShownDateChange(visibleMonth);\n      }\n    }\n  }, {\n    key: 'renderMonthAndYear',\n    value: function renderMonthAndYear(focusedDate, changeShownDate, props) {\n      var showMonthArrow = props.showMonthArrow,\n          locale = props.locale,\n          minDate = props.minDate,\n          maxDate = props.maxDate,\n          showMonthAndYearPickers = props.showMonthAndYearPickers;\n      var upperYearLimit = (maxDate || Calendar.defaultProps.maxDate).getFullYear();\n      var lowerYearLimit = (minDate || Calendar.defaultProps.minDate).getFullYear();\n      var styles = this.styles;\n      return _react2.default.createElement('div', {\n        onMouseUp: function onMouseUp(e) {\n          return e.stopPropagation();\n        },\n        className: styles.monthAndYearWrapper\n      }, showMonthArrow ? _react2.default.createElement('button', {\n        type: 'button',\n        className: (0, _classnames4.default)(styles.nextPrevButton, styles.prevButton),\n        onClick: function onClick() {\n          return changeShownDate(-1, 'monthOffset');\n        }\n      }, _react2.default.createElement('i', null)) : null, showMonthAndYearPickers ? _react2.default.createElement('span', {\n        className: styles.monthAndYearPickers\n      }, _react2.default.createElement('span', {\n        className: styles.monthPicker\n      }, _react2.default.createElement('select', {\n        value: focusedDate.getMonth(),\n        onChange: function onChange(e) {\n          return changeShownDate(e.target.value, 'setMonth');\n        }\n      }, locale.localize.months().map(function (month, i) {\n        return _react2.default.createElement('option', {\n          key: i,\n          value: i\n        }, month);\n      }))), _react2.default.createElement('span', {\n        className: styles.monthAndYearDivider\n      }), _react2.default.createElement('span', {\n        className: styles.yearPicker\n      }, _react2.default.createElement('select', {\n        value: focusedDate.getFullYear(),\n        onChange: function onChange(e) {\n          return changeShownDate(e.target.value, 'setYear');\n        }\n      }, new Array(upperYearLimit - lowerYearLimit + 1).fill(upperYearLimit).map(function (val, i) {\n        var year = val - i;\n        return _react2.default.createElement('option', {\n          key: year,\n          value: year\n        }, year);\n      })))) : _react2.default.createElement('span', {\n        className: styles.monthAndYearPickers\n      }, locale.localize.months()[focusedDate.getMonth()], ' ', focusedDate.getFullYear()), showMonthArrow ? _react2.default.createElement('button', {\n        type: 'button',\n        className: (0, _classnames4.default)(styles.nextPrevButton, styles.nextButton),\n        onClick: function onClick() {\n          return changeShownDate(+1, 'monthOffset');\n        }\n      }, _react2.default.createElement('i', null)) : null);\n    }\n  }, {\n    key: 'renderWeekdays',\n    value: function renderWeekdays() {\n      var _this3 = this;\n\n      var now = new Date();\n      return _react2.default.createElement('div', {\n        className: this.styles.weekDays\n      }, (0, _eachDayOfInterval2.default)({\n        start: (0, _startOfWeek2.default)(now, this.dateOptions),\n        end: (0, _endOfWeek2.default)(now, this.dateOptions)\n      }).map(function (day, i) {\n        return _react2.default.createElement('span', {\n          className: _this3.styles.weekDay,\n          key: i\n        }, (0, _format2.default)(day, 'ddd', _this3.dateOptions));\n      }));\n    }\n  }, {\n    key: 'renderDateDisplay',\n    value: function renderDateDisplay() {\n      var _this4 = this;\n\n      var _props3 = this.props,\n          focusedRange = _props3.focusedRange,\n          color = _props3.color,\n          ranges = _props3.ranges,\n          rangeColors = _props3.rangeColors;\n      var defaultColor = rangeColors[focusedRange[0]] || color;\n      var styles = this.styles;\n      return _react2.default.createElement('div', {\n        className: styles.dateDisplayWrapper\n      }, ranges.map(function (range, i) {\n        if (range.showDateDisplay === false || range.disabled && !range.showDateDisplay) return null;\n        return _react2.default.createElement('div', {\n          className: styles.dateDisplay,\n          key: i,\n          style: {\n            color: range.color || defaultColor\n          }\n        }, _react2.default.createElement('span', {\n          className: (0, _classnames4.default)(styles.dateDisplayItem, _defineProperty({}, styles.dateDisplayItemActive, focusedRange[0] === i && focusedRange[1] === 0)),\n          onFocus: function onFocus() {\n            return _this4.handleRangeFocusChange(i, 0);\n          }\n        }, _react2.default.createElement('input', {\n          disabled: range.disabled,\n          readOnly: true,\n          value: _this4.formatDateDisplay(range.startDate, 'Early')\n        })), _react2.default.createElement('span', {\n          className: (0, _classnames4.default)(styles.dateDisplayItem, _defineProperty({}, styles.dateDisplayItemActive, focusedRange[0] === i && focusedRange[1] === 1)),\n          onFocus: function onFocus() {\n            return _this4.handleRangeFocusChange(i, 1);\n          }\n        }, _react2.default.createElement('input', {\n          disabled: range.disabled,\n          readOnly: true,\n          value: _this4.formatDateDisplay(range.endDate, 'Continuous')\n        })));\n      }));\n    }\n  }, {\n    key: 'onDragSelectionStart',\n    value: function onDragSelectionStart(date) {\n      var _props4 = this.props,\n          onChange = _props4.onChange,\n          dragSelectionEnabled = _props4.dragSelectionEnabled;\n\n      if (dragSelectionEnabled) {\n        this.setState({\n          drag: {\n            status: true,\n            range: {\n              startDate: date,\n              endDate: date\n            },\n            disablePreview: true\n          }\n        });\n      } else {\n        onChange && onChange(date);\n      }\n    }\n  }, {\n    key: 'onDragSelectionEnd',\n    value: function onDragSelectionEnd(date) {\n      var _props5 = this.props,\n          updateRange = _props5.updateRange,\n          displayMode = _props5.displayMode,\n          onChange = _props5.onChange,\n          dragSelectionEnabled = _props5.dragSelectionEnabled;\n      if (!dragSelectionEnabled) return;\n\n      if (displayMode === 'date' || !this.state.drag.status) {\n        onChange && onChange(date);\n        return;\n      }\n\n      var newRange = {\n        startDate: this.state.drag.range.startDate,\n        endDate: date\n      };\n\n      if (displayMode !== 'dateRange' || (0, _isSameDay2.default)(newRange.startDate, date)) {\n        this.setState({\n          drag: {\n            status: false,\n            range: {}\n          }\n        }, function () {\n          return onChange && onChange(date);\n        });\n      } else {\n        this.setState({\n          drag: {\n            status: false,\n            range: {}\n          }\n        }, function () {\n          updateRange && updateRange(newRange);\n        });\n      }\n    }\n  }, {\n    key: 'onDragSelectionMove',\n    value: function onDragSelectionMove(date) {\n      var drag = this.state.drag;\n      if (!drag.status || !this.props.dragSelectionEnabled) return;\n      this.setState({\n        drag: {\n          status: drag.status,\n          range: {\n            startDate: drag.range.startDate,\n            endDate: date\n          },\n          disablePreview: true\n        }\n      });\n    }\n  }, {\n    key: 'estimateMonthSize',\n    value: function estimateMonthSize(index, cache) {\n      var _props6 = this.props,\n          direction = _props6.direction,\n          minDate = _props6.minDate;\n      var scrollArea = this.state.scrollArea;\n\n      if (cache) {\n        this.listSizeCache = cache;\n        if (cache[index]) return cache[index];\n      }\n\n      if (direction === 'horizontal') return scrollArea.monthWidth;\n      var monthStep = (0, _addMonths2.default)(minDate, index);\n\n      var _getMonthDisplayRange = (0, _utils.getMonthDisplayRange)(monthStep, this.dateOptions),\n          start = _getMonthDisplayRange.start,\n          end = _getMonthDisplayRange.end;\n\n      var isLongMonth = (0, _differenceInDays2.default)(end, start, this.dateOptions) + 1 > 7 * 5;\n      return isLongMonth ? scrollArea.longMonthHeight : scrollArea.monthHeight;\n    }\n  }, {\n    key: 'formatDateDisplay',\n    value: function formatDateDisplay(date, defaultText) {\n      if (!date) return defaultText;\n      return (0, _format2.default)(date, this.props.dateDisplayFormat, this.dateOptions);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var _props7 = this.props,\n          showDateDisplay = _props7.showDateDisplay,\n          onPreviewChange = _props7.onPreviewChange,\n          scroll = _props7.scroll,\n          direction = _props7.direction,\n          maxDate = _props7.maxDate,\n          minDate = _props7.minDate,\n          rangeColors = _props7.rangeColors,\n          color = _props7.color;\n      var _state = this.state,\n          scrollArea = _state.scrollArea,\n          focusedDate = _state.focusedDate;\n      var isVertical = direction === 'vertical';\n      var navigatorRenderer = this.props.navigatorRenderer || this.renderMonthAndYear;\n      var ranges = this.props.ranges.map(function (range, i) {\n        return _extends({}, range, {\n          color: range.color || rangeColors[i] || color\n        });\n      });\n      return _react2.default.createElement('div', {\n        className: (0, _classnames4.default)(this.styles.calendarWrapper, this.props.className),\n        onMouseUp: function onMouseUp() {\n          return _this5.setState({\n            drag: {\n              status: false,\n              range: {}\n            }\n          });\n        },\n        onMouseLeave: function onMouseLeave() {\n          _this5.setState({\n            drag: {\n              status: false,\n              range: {}\n            }\n          });\n        }\n      }, showDateDisplay && this.renderDateDisplay(), navigatorRenderer(focusedDate, this.changeShownDate, this.props), scroll.enabled ? _react2.default.createElement('div', null, isVertical && this.renderWeekdays(this.dateOptions), _react2.default.createElement('div', {\n        className: (0, _classnames4.default)(this.styles.infiniteMonths, isVertical ? this.styles.monthsVertical : this.styles.monthsHorizontal),\n        onMouseLeave: function onMouseLeave() {\n          return onPreviewChange && onPreviewChange();\n        },\n        style: {\n          width: scrollArea.calendarWidth + 11,\n          height: scrollArea.calendarHeight + 11\n        },\n        onScroll: this.handleScroll\n      }, _react2.default.createElement(_reactList2.default, {\n        length: (0, _differenceInCalendarMonths2.default)((0, _endOfMonth2.default)(maxDate), (0, _addDays2.default)((0, _startOfMonth2.default)(minDate), -1), this.dateOptions),\n        treshold: 500,\n        type: 'variable',\n        ref: function ref(target) {\n          return _this5.list = target;\n        },\n        itemSizeEstimator: this.estimateMonthSize,\n        axis: isVertical ? 'y' : 'x',\n        itemRenderer: function itemRenderer(index, key) {\n          var monthStep = (0, _addMonths2.default)(minDate, index);\n          return _react2.default.createElement(_Month2.default, _extends({}, _this5.props, {\n            onPreviewChange: _this5.props.onPreviewChange || _this5.updatePreview,\n            preview: _this5.props.preview || _this5.state.preview,\n            ranges: ranges,\n            key: key,\n            drag: _this5.state.drag,\n            dateOptions: _this5.dateOptions,\n            month: monthStep,\n            onDragSelectionStart: _this5.onDragSelectionStart,\n            onDragSelectionEnd: _this5.onDragSelectionEnd,\n            onDragSelectionMove: _this5.onDragSelectionMove,\n            onMouseLeave: function onMouseLeave() {\n              return onPreviewChange && onPreviewChange();\n            },\n            styles: _this5.styles,\n            style: isVertical ? {\n              height: _this5.estimateMonthSize(index)\n            } : {\n              height: scrollArea.monthHeight,\n              width: _this5.estimateMonthSize(index)\n            },\n            showMonthName: true,\n            showWeekDays: !isVertical\n          }));\n        }\n      }))) : _react2.default.createElement('div', {\n        className: (0, _classnames4.default)(this.styles.months, isVertical ? this.styles.monthsVertical : this.styles.monthsHorizontal)\n      }, new Array(this.props.months).fill(null).map(function (_, i) {\n        var monthStep = (0, _addMonths2.default)(_this5.state.focusedDate, i);\n        return _react2.default.createElement(_Month2.default, _extends({}, _this5.props, {\n          onPreviewChange: _this5.props.onPreviewChange || _this5.updatePreview,\n          preview: _this5.props.preview || _this5.state.preview,\n          ranges: ranges,\n          key: i,\n          drag: _this5.state.drag,\n          dateOptions: _this5.dateOptions,\n          month: monthStep,\n          onDragSelectionStart: _this5.onDragSelectionStart,\n          onDragSelectionEnd: _this5.onDragSelectionEnd,\n          onDragSelectionMove: _this5.onDragSelectionMove,\n          onMouseLeave: function onMouseLeave() {\n            return onPreviewChange && onPreviewChange();\n          },\n          styles: _this5.styles,\n          showWeekDays: !isVertical || i === 0,\n          showMonthName: !isVertical || i > 0\n        }));\n      })));\n    }\n  }]);\n\n  return Calendar;\n}(_react.PureComponent);\n\nCalendar.defaultProps = {\n  showMonthArrow: true,\n  showMonthAndYearPickers: true,\n  classNames: {},\n  locale: _enUS2.default,\n  ranges: [],\n  focusedRange: [0, 0],\n  dateDisplayFormat: 'MMM D, YYYY',\n  monthDisplayFormat: 'MMM YYYY',\n  showDateDisplay: true,\n  showPreview: true,\n  displayMode: 'date',\n  months: 1,\n  color: '#3d91ff',\n  scroll: {\n    enabled: false\n  },\n  direction: 'vertical',\n  maxDate: (0, _addYears2.default)(new Date(), 20),\n  minDate: (0, _addYears2.default)(new Date(), -100),\n  rangeColors: ['#3d91ff', '#3ecf8e', '#fed14c'],\n  dragSelectionEnabled: true\n};\nCalendar.propTypes = {\n  showMonthArrow: _propTypes2.default.bool,\n  showMonthAndYearPickers: _propTypes2.default.bool,\n  minDate: _propTypes2.default.object,\n  maxDate: _propTypes2.default.object,\n  date: _propTypes2.default.object,\n  onChange: _propTypes2.default.func,\n  onPreviewChange: _propTypes2.default.func,\n  onRangeFocusChange: _propTypes2.default.func,\n  classNames: _propTypes2.default.object,\n  locale: _propTypes2.default.object,\n  shownDate: _propTypes2.default.object,\n  onShownDateChange: _propTypes2.default.func,\n  ranges: _propTypes2.default.arrayOf(_DayCell.rangeShape),\n  preview: _propTypes2.default.shape({\n    startDate: _propTypes2.default.object,\n    endDate: _propTypes2.default.object,\n    color: _propTypes2.default.string\n  }),\n  dateDisplayFormat: _propTypes2.default.string,\n  monthDisplayFormat: _propTypes2.default.string,\n  focusedRange: _propTypes2.default.arrayOf(_propTypes2.default.number),\n  initialFocusedRange: _propTypes2.default.arrayOf(_propTypes2.default.number),\n  months: _propTypes2.default.number,\n  className: _propTypes2.default.string,\n  showDateDisplay: _propTypes2.default.bool,\n  showPreview: _propTypes2.default.bool,\n  displayMode: _propTypes2.default.oneOf(['dateRange', 'date']),\n  color: _propTypes2.default.string,\n  updateRange: _propTypes2.default.func,\n  scroll: _propTypes2.default.shape({\n    enabled: _propTypes2.default.bool,\n    monthHeight: _propTypes2.default.number,\n    longMonthHeight: _propTypes2.default.number,\n    monthWidth: _propTypes2.default.number,\n    calendarWidth: _propTypes2.default.number,\n    calendarHeight: _propTypes2.default.number\n  }),\n  direction: _propTypes2.default.oneOf(['vertical', 'horizontal']),\n  navigatorRenderer: _propTypes2.default.func,\n  rangeColors: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  dragSelectionEnabled: _propTypes2.default.bool\n};\nexports.default = Calendar;","map":null,"metadata":{},"sourceType":"script"}