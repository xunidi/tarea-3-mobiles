{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['module', 'prop-types', 'react'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, require('prop-types'), require('react'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, global.PropTypes, global.React);\n    global.ReactList = mod.exports;\n  }\n})(this, function (_module2, _propTypes, _react) {\n  'use strict';\n\n  var _module3 = _interopRequireDefault(_module2);\n\n  var _propTypes2 = _interopRequireDefault(_propTypes);\n\n  var _react2 = _interopRequireDefault(_react);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var _class, _temp;\n\n  var CLIENT_SIZE_KEYS = {\n    x: 'clientWidth',\n    y: 'clientHeight'\n  };\n  var CLIENT_START_KEYS = {\n    x: 'clientTop',\n    y: 'clientLeft'\n  };\n  var INNER_SIZE_KEYS = {\n    x: 'innerWidth',\n    y: 'innerHeight'\n  };\n  var OFFSET_SIZE_KEYS = {\n    x: 'offsetWidth',\n    y: 'offsetHeight'\n  };\n  var OFFSET_START_KEYS = {\n    x: 'offsetLeft',\n    y: 'offsetTop'\n  };\n  var OVERFLOW_KEYS = {\n    x: 'overflowX',\n    y: 'overflowY'\n  };\n  var SCROLL_SIZE_KEYS = {\n    x: 'scrollWidth',\n    y: 'scrollHeight'\n  };\n  var SCROLL_START_KEYS = {\n    x: 'scrollLeft',\n    y: 'scrollTop'\n  };\n  var SIZE_KEYS = {\n    x: 'width',\n    y: 'height'\n  };\n\n  var NOOP = function NOOP() {}; // If a browser doesn't support the `options` argument to\n  // add/removeEventListener, we need to check, otherwise we will\n  // accidentally set `capture` with a truthy value.\n\n\n  var PASSIVE = function () {\n    if (typeof window === 'undefined') return false;\n    var hasSupport = false;\n\n    try {\n      document.createElement('div').addEventListener('test', NOOP, {\n        get passive() {\n          hasSupport = true;\n          return false;\n        }\n\n      });\n    } catch (e) {}\n\n    return hasSupport;\n  }() ? {\n    passive: true\n  } : false;\n  var UNSTABLE_MESSAGE = 'ReactList failed to reach a stable state.';\n  var MAX_SYNC_UPDATES = 50;\n\n  var isEqualSubset = function isEqualSubset(a, b) {\n    for (var key in b) {\n      if (a[key] !== b[key]) return false;\n    }\n\n    return true;\n  };\n\n  var defaultScrollParentGetter = function defaultScrollParentGetter(component) {\n    var axis = component.props.axis;\n    var el = component.getEl();\n    var overflowKey = OVERFLOW_KEYS[axis];\n\n    while (el = el.parentElement) {\n      switch (window.getComputedStyle(el)[overflowKey]) {\n        case 'auto':\n        case 'scroll':\n        case 'overlay':\n          return el;\n      }\n    }\n\n    return window;\n  };\n\n  var defaultScrollParentViewportSizeGetter = function defaultScrollParentViewportSizeGetter(component) {\n    var axis = component.props.axis;\n    var scrollParent = component.scrollParent;\n    return scrollParent === window ? window[INNER_SIZE_KEYS[axis]] : scrollParent[CLIENT_SIZE_KEYS[axis]];\n  };\n\n  _module3.default.exports = (_temp = _class = function (_Component) {\n    _inherits(ReactList, _Component);\n\n    function ReactList(props) {\n      _classCallCheck(this, ReactList);\n\n      var _this = _possibleConstructorReturn(this, (ReactList.__proto__ || Object.getPrototypeOf(ReactList)).call(this, props));\n\n      var initialIndex = props.initialIndex;\n      var itemsPerRow = 1;\n\n      var _this$constrain = _this.constrain(initialIndex, 0, itemsPerRow, props),\n          from = _this$constrain.from,\n          size = _this$constrain.size;\n\n      _this.state = {\n        from: from,\n        size: size,\n        itemsPerRow: itemsPerRow\n      };\n      _this.cache = {};\n      _this.cachedScrollPosition = null;\n      _this.prevPrevState = {};\n      _this.unstable = false;\n      _this.updateCounter = 0;\n      return _this;\n    }\n\n    _createClass(ReactList, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(next) {\n        // Viewport scroll is no longer useful if axis changes\n        if (this.props.axis !== next.axis) this.clearSizeCache();\n        var _state = this.state,\n            from = _state.from,\n            size = _state.size,\n            itemsPerRow = _state.itemsPerRow;\n        this.maybeSetState(this.constrain(from, size, itemsPerRow, next), NOOP);\n      }\n    }, {\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        this.updateFrameAndClearCache = this.updateFrameAndClearCache.bind(this);\n        window.addEventListener('resize', this.updateFrameAndClearCache);\n        this.updateFrame(this.scrollTo.bind(this, this.props.initialIndex));\n      }\n    }, {\n      key: 'componentDidUpdate',\n      value: function componentDidUpdate() {\n        var _this2 = this; // If the list has reached an unstable state, prevent an infinite loop.\n\n\n        if (this.unstable) return;\n\n        if (++this.updateCounter > MAX_SYNC_UPDATES) {\n          this.unstable = true;\n          return console.error(UNSTABLE_MESSAGE);\n        }\n\n        if (!this.updateCounterTimeoutId) {\n          this.updateCounterTimeoutId = setTimeout(function () {\n            _this2.updateCounter = 0;\n            delete _this2.updateCounterTimeoutId;\n          }, 0);\n        }\n\n        this.updateFrame();\n      }\n    }, {\n      key: 'maybeSetState',\n      value: function maybeSetState(b, cb) {\n        if (isEqualSubset(this.state, b)) return cb();\n        this.setState(b, cb);\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        window.removeEventListener('resize', this.updateFrameAndClearCache);\n        this.scrollParent.removeEventListener('scroll', this.updateFrameAndClearCache, PASSIVE);\n        this.scrollParent.removeEventListener('mousewheel', NOOP, PASSIVE);\n      }\n    }, {\n      key: 'getOffset',\n      value: function getOffset(el) {\n        var axis = this.props.axis;\n        var offset = el[CLIENT_START_KEYS[axis]] || 0;\n        var offsetKey = OFFSET_START_KEYS[axis];\n\n        do {\n          offset += el[offsetKey] || 0;\n        } while (el = el.offsetParent);\n\n        return offset;\n      }\n    }, {\n      key: 'getEl',\n      value: function getEl() {\n        return this.el || this.items;\n      }\n    }, {\n      key: 'getScrollPosition',\n      value: function getScrollPosition() {\n        // Cache scroll position as this causes a forced synchronous layout.\n        if (typeof this.cachedScrollPosition === 'number') return this.cachedScrollPosition;\n        var scrollParent = this.scrollParent;\n        var axis = this.props.axis;\n        var scrollKey = SCROLL_START_KEYS[axis];\n        var actual = scrollParent === window ? // Firefox always returns document.body[scrollKey] as 0 and Chrome/Safari\n        // always return document.documentElement[scrollKey] as 0, so take\n        // whichever has a value.\n        document.body[scrollKey] || document.documentElement[scrollKey] : scrollParent[scrollKey];\n        var max = this.getScrollSize() - this.props.scrollParentViewportSizeGetter(this);\n        var scroll = Math.max(0, Math.min(actual, max));\n        var el = this.getEl();\n        this.cachedScrollPosition = this.getOffset(scrollParent) + scroll - this.getOffset(el);\n        return this.cachedScrollPosition;\n      }\n    }, {\n      key: 'setScroll',\n      value: function setScroll(offset) {\n        var scrollParent = this.scrollParent;\n        var axis = this.props.axis;\n        offset += this.getOffset(this.getEl());\n        if (scrollParent === window) return window.scrollTo(0, offset);\n        offset -= this.getOffset(this.scrollParent);\n        scrollParent[SCROLL_START_KEYS[axis]] = offset;\n      }\n    }, {\n      key: 'getScrollSize',\n      value: function getScrollSize() {\n        var scrollParent = this.scrollParent;\n        var _document = document,\n            body = _document.body,\n            documentElement = _document.documentElement;\n        var key = SCROLL_SIZE_KEYS[this.props.axis];\n        return scrollParent === window ? Math.max(body[key], documentElement[key]) : scrollParent[key];\n      }\n    }, {\n      key: 'hasDeterminateSize',\n      value: function hasDeterminateSize() {\n        var _props = this.props,\n            itemSizeGetter = _props.itemSizeGetter,\n            type = _props.type;\n        return type === 'uniform' || itemSizeGetter;\n      }\n    }, {\n      key: 'getStartAndEnd',\n      value: function getStartAndEnd() {\n        var threshold = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.threshold;\n        var scroll = this.getScrollPosition();\n        var start = Math.max(0, scroll - threshold);\n        var end = scroll + this.props.scrollParentViewportSizeGetter(this) + threshold;\n\n        if (this.hasDeterminateSize()) {\n          end = Math.min(end, this.getSpaceBefore(this.props.length));\n        }\n\n        return {\n          start: start,\n          end: end\n        };\n      }\n    }, {\n      key: 'getItemSizeAndItemsPerRow',\n      value: function getItemSizeAndItemsPerRow() {\n        var _props2 = this.props,\n            axis = _props2.axis,\n            useStaticSize = _props2.useStaticSize;\n        var _state2 = this.state,\n            itemSize = _state2.itemSize,\n            itemsPerRow = _state2.itemsPerRow;\n\n        if (useStaticSize && itemSize && itemsPerRow) {\n          return {\n            itemSize: itemSize,\n            itemsPerRow: itemsPerRow\n          };\n        }\n\n        var itemEls = this.items.children;\n        if (!itemEls.length) return {};\n        var firstEl = itemEls[0]; // Firefox has a problem where it will return a *slightly* (less than\n        // thousandths of a pixel) different size for the same element between\n        // renders. This can cause an infinite render loop, so only change the\n        // itemSize when it is significantly different.\n\n        var firstElSize = firstEl[OFFSET_SIZE_KEYS[axis]];\n        var delta = Math.abs(firstElSize - itemSize);\n        if (isNaN(delta) || delta >= 1) itemSize = firstElSize;\n        if (!itemSize) return {};\n        var startKey = OFFSET_START_KEYS[axis];\n        var firstStart = firstEl[startKey];\n        itemsPerRow = 1;\n\n        for (var item = itemEls[itemsPerRow]; item && item[startKey] === firstStart; item = itemEls[itemsPerRow]) {\n          ++itemsPerRow;\n        }\n\n        return {\n          itemSize: itemSize,\n          itemsPerRow: itemsPerRow\n        };\n      }\n    }, {\n      key: 'clearSizeCache',\n      value: function clearSizeCache() {\n        this.cachedScrollPosition = null;\n      }\n    }, {\n      key: 'updateFrameAndClearCache',\n      value: function updateFrameAndClearCache(cb) {\n        this.clearSizeCache();\n        return this.updateFrame(cb);\n      }\n    }, {\n      key: 'updateFrame',\n      value: function updateFrame(cb) {\n        this.updateScrollParent();\n        if (typeof cb != 'function') cb = NOOP;\n\n        switch (this.props.type) {\n          case 'simple':\n            return this.updateSimpleFrame(cb);\n\n          case 'variable':\n            return this.updateVariableFrame(cb);\n\n          case 'uniform':\n            return this.updateUniformFrame(cb);\n        }\n      }\n    }, {\n      key: 'updateScrollParent',\n      value: function updateScrollParent() {\n        var prev = this.scrollParent;\n        this.scrollParent = this.props.scrollParentGetter(this);\n        if (prev === this.scrollParent) return;\n\n        if (prev) {\n          prev.removeEventListener('scroll', this.updateFrameAndClearCache);\n          prev.removeEventListener('mousewheel', NOOP);\n        } // If we have a new parent, cached parent dimensions are no longer useful.\n\n\n        this.clearSizeCache();\n        this.scrollParent.addEventListener('scroll', this.updateFrameAndClearCache, PASSIVE); // You have to attach mousewheel listener to the scrollable element.\n        // Just an empty listener. After that onscroll events will be fired synchronously.\n\n        this.scrollParent.addEventListener('mousewheel', NOOP, PASSIVE);\n      }\n    }, {\n      key: 'updateSimpleFrame',\n      value: function updateSimpleFrame(cb) {\n        var _getStartAndEnd = this.getStartAndEnd(),\n            end = _getStartAndEnd.end;\n\n        var itemEls = this.items.children;\n        var elEnd = 0;\n\n        if (itemEls.length) {\n          var axis = this.props.axis;\n          var firstItemEl = itemEls[0];\n          var lastItemEl = itemEls[itemEls.length - 1];\n          elEnd = this.getOffset(lastItemEl) + lastItemEl[OFFSET_SIZE_KEYS[axis]] - this.getOffset(firstItemEl);\n        }\n\n        if (elEnd > end) return cb();\n        var _props3 = this.props,\n            pageSize = _props3.pageSize,\n            length = _props3.length;\n        var size = Math.min(this.state.size + pageSize, length);\n        this.maybeSetState({\n          size: size\n        }, cb);\n      }\n    }, {\n      key: 'updateVariableFrame',\n      value: function updateVariableFrame(cb) {\n        if (!this.props.itemSizeGetter) this.cacheSizes();\n\n        var _getStartAndEnd2 = this.getStartAndEnd(),\n            start = _getStartAndEnd2.start,\n            end = _getStartAndEnd2.end;\n\n        var _props4 = this.props,\n            length = _props4.length,\n            pageSize = _props4.pageSize;\n        var space = 0;\n        var from = 0;\n        var size = 0;\n        var maxFrom = length - 1;\n\n        while (from < maxFrom) {\n          var itemSize = this.getSizeOfItem(from);\n          if (itemSize == null || space + itemSize > start) break;\n          space += itemSize;\n          ++from;\n        }\n\n        var maxSize = length - from;\n\n        while (size < maxSize && space < end) {\n          var _itemSize = this.getSizeOfItem(from + size);\n\n          if (_itemSize == null) {\n            size = Math.min(size + pageSize, maxSize);\n            break;\n          }\n\n          space += _itemSize;\n          ++size;\n        }\n\n        this.maybeSetState({\n          from: from,\n          size: size\n        }, cb);\n      }\n    }, {\n      key: 'updateUniformFrame',\n      value: function updateUniformFrame(cb) {\n        var _getItemSizeAndItemsP = this.getItemSizeAndItemsPerRow(),\n            itemSize = _getItemSizeAndItemsP.itemSize,\n            itemsPerRow = _getItemSizeAndItemsP.itemsPerRow;\n\n        if (!itemSize || !itemsPerRow) return cb();\n\n        var _getStartAndEnd3 = this.getStartAndEnd(),\n            start = _getStartAndEnd3.start,\n            end = _getStartAndEnd3.end;\n\n        var _constrain = this.constrain(Math.floor(start / itemSize) * itemsPerRow, (Math.ceil((end - start) / itemSize) + 1) * itemsPerRow, itemsPerRow, this.props),\n            from = _constrain.from,\n            size = _constrain.size;\n\n        return this.maybeSetState({\n          itemsPerRow: itemsPerRow,\n          from: from,\n          itemSize: itemSize,\n          size: size\n        }, cb);\n      }\n    }, {\n      key: 'getSpaceBefore',\n      value: function getSpaceBefore(index) {\n        var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (cache[index] != null) return cache[index]; // Try the static itemSize.\n\n        var _state3 = this.state,\n            itemSize = _state3.itemSize,\n            itemsPerRow = _state3.itemsPerRow;\n\n        if (itemSize) {\n          return cache[index] = Math.floor(index / itemsPerRow) * itemSize;\n        } // Find the closest space to index there is a cached value for.\n\n\n        var from = index;\n\n        while (from > 0 && cache[--from] == null) {} // Finally, accumulate sizes of items from - index.\n\n\n        var space = cache[from] || 0;\n\n        for (var i = from; i < index; ++i) {\n          cache[i] = space;\n\n          var _itemSize2 = this.getSizeOfItem(i);\n\n          if (_itemSize2 == null) break;\n          space += _itemSize2;\n        }\n\n        return cache[index] = space;\n      }\n    }, {\n      key: 'cacheSizes',\n      value: function cacheSizes() {\n        var cache = this.cache;\n        var from = this.state.from;\n        var itemEls = this.items.children;\n        var sizeKey = OFFSET_SIZE_KEYS[this.props.axis];\n\n        for (var i = 0, l = itemEls.length; i < l; ++i) {\n          cache[from + i] = itemEls[i][sizeKey];\n        }\n      }\n    }, {\n      key: 'getSizeOfItem',\n      value: function getSizeOfItem(index) {\n        var cache = this.cache,\n            items = this.items;\n        var _props5 = this.props,\n            axis = _props5.axis,\n            itemSizeGetter = _props5.itemSizeGetter,\n            itemSizeEstimator = _props5.itemSizeEstimator,\n            type = _props5.type;\n        var _state4 = this.state,\n            from = _state4.from,\n            itemSize = _state4.itemSize,\n            size = _state4.size; // Try the static itemSize.\n\n        if (itemSize) return itemSize; // Try the itemSizeGetter.\n\n        if (itemSizeGetter) return itemSizeGetter(index); // Try the cache.\n\n        if (index in cache) return cache[index]; // Try the DOM.\n\n        if (type === 'simple' && index >= from && index < from + size && items) {\n          var itemEl = items.children[index - from];\n          if (itemEl) return itemEl[OFFSET_SIZE_KEYS[axis]];\n        } // Try the itemSizeEstimator.\n\n\n        if (itemSizeEstimator) return itemSizeEstimator(index, cache);\n      }\n    }, {\n      key: 'constrain',\n      value: function constrain(from, size, itemsPerRow, _ref) {\n        var length = _ref.length,\n            minSize = _ref.minSize,\n            type = _ref.type;\n        size = Math.max(size, minSize);\n        var mod = size % itemsPerRow;\n        if (mod) size += itemsPerRow - mod;\n        if (size > length) size = length;\n        from = type === 'simple' || !from ? 0 : Math.max(Math.min(from, length - size), 0);\n\n        if (mod = from % itemsPerRow) {\n          from -= mod;\n          size += mod;\n        }\n\n        return {\n          from: from,\n          size: size\n        };\n      }\n    }, {\n      key: 'scrollTo',\n      value: function scrollTo(index) {\n        if (index != null) this.setScroll(this.getSpaceBefore(index));\n      }\n    }, {\n      key: 'scrollAround',\n      value: function scrollAround(index) {\n        var current = this.getScrollPosition();\n        var bottom = this.getSpaceBefore(index);\n        var top = bottom - this.props.scrollParentViewportSizeGetter(this) + this.getSizeOfItem(index);\n        var min = Math.min(top, bottom);\n        var max = Math.max(top, bottom);\n        if (current <= min) return this.setScroll(min);\n        if (current > max) return this.setScroll(max);\n      }\n    }, {\n      key: 'getVisibleRange',\n      value: function getVisibleRange() {\n        var _state5 = this.state,\n            from = _state5.from,\n            size = _state5.size;\n\n        var _getStartAndEnd4 = this.getStartAndEnd(0),\n            start = _getStartAndEnd4.start,\n            end = _getStartAndEnd4.end;\n\n        var cache = {};\n        var first = void 0,\n            last = void 0;\n\n        for (var i = from; i < from + size; ++i) {\n          var itemStart = this.getSpaceBefore(i, cache);\n          var itemEnd = itemStart + this.getSizeOfItem(i);\n          if (first == null && itemEnd > start) first = i;\n          if (first != null && itemStart < end) last = i;\n        }\n\n        return [first, last];\n      }\n    }, {\n      key: 'renderItems',\n      value: function renderItems() {\n        var _this3 = this;\n\n        var _props6 = this.props,\n            itemRenderer = _props6.itemRenderer,\n            itemsRenderer = _props6.itemsRenderer;\n        var _state6 = this.state,\n            from = _state6.from,\n            size = _state6.size;\n        var items = [];\n\n        for (var i = 0; i < size; ++i) {\n          items.push(itemRenderer(from + i, i));\n        }\n\n        return itemsRenderer(items, function (c) {\n          return _this3.items = c;\n        });\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this4 = this;\n\n        var _props7 = this.props,\n            axis = _props7.axis,\n            length = _props7.length,\n            type = _props7.type,\n            useTranslate3d = _props7.useTranslate3d;\n        var _state7 = this.state,\n            from = _state7.from,\n            itemsPerRow = _state7.itemsPerRow;\n        var items = this.renderItems();\n        if (type === 'simple') return items;\n        var style = {\n          position: 'relative'\n        };\n        var cache = {};\n        var bottom = Math.ceil(length / itemsPerRow) * itemsPerRow;\n        var size = this.getSpaceBefore(bottom, cache);\n\n        if (size) {\n          style[SIZE_KEYS[axis]] = size;\n          if (axis === 'x') style.overflowX = 'hidden';\n        }\n\n        var offset = this.getSpaceBefore(from, cache);\n        var x = axis === 'x' ? offset : 0;\n        var y = axis === 'y' ? offset : 0;\n        var transform = useTranslate3d ? 'translate3d(' + x + 'px, ' + y + 'px, 0)' : 'translate(' + x + 'px, ' + y + 'px)';\n        var listStyle = {\n          msTransform: transform,\n          WebkitTransform: transform,\n          transform: transform\n        };\n        return _react2.default.createElement('div', {\n          style: style,\n          ref: function ref(c) {\n            return _this4.el = c;\n          }\n        }, _react2.default.createElement('div', {\n          style: listStyle\n        }, items));\n      }\n    }]);\n\n    return ReactList;\n  }(_react.Component), _class.displayName = 'ReactList', _class.propTypes = {\n    axis: _propTypes2.default.oneOf(['x', 'y']),\n    initialIndex: _propTypes2.default.number,\n    itemRenderer: _propTypes2.default.func,\n    itemSizeEstimator: _propTypes2.default.func,\n    itemSizeGetter: _propTypes2.default.func,\n    itemsRenderer: _propTypes2.default.func,\n    length: _propTypes2.default.number,\n    minSize: _propTypes2.default.number,\n    pageSize: _propTypes2.default.number,\n    scrollParentGetter: _propTypes2.default.func,\n    scrollParentViewportSizeGetter: _propTypes2.default.func,\n    threshold: _propTypes2.default.number,\n    type: _propTypes2.default.oneOf(['simple', 'variable', 'uniform']),\n    useStaticSize: _propTypes2.default.bool,\n    useTranslate3d: _propTypes2.default.bool\n  }, _class.defaultProps = {\n    axis: 'y',\n    itemRenderer: function itemRenderer(index, key) {\n      return _react2.default.createElement('div', {\n        key: key\n      }, index);\n    },\n    itemsRenderer: function itemsRenderer(items, ref) {\n      return _react2.default.createElement('div', {\n        ref: ref\n      }, items);\n    },\n    length: 0,\n    minSize: 1,\n    pageSize: 10,\n    scrollParentGetter: defaultScrollParentGetter,\n    scrollParentViewportSizeGetter: defaultScrollParentViewportSizeGetter,\n    threshold: 100,\n    type: 'simple',\n    useStaticSize: false,\n    useTranslate3d: false\n  }, _temp);\n});","map":null,"metadata":{},"sourceType":"script"}