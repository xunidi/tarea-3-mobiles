{"ast":null,"code":"var commonTokenKeys = ['x', 'ss', 's', 'mm', 'm', 'hh', 'h', 'do', 'dddd', 'ddd', 'dd', 'd', 'aa', 'a', 'ZZ', 'Z', 'YYYY', 'YY', 'X', 'Wo', 'WW', 'W', 'SSS', 'SS', 'S', 'Qo', 'Q', 'Mo', 'MMMM', 'MMM', 'MM', 'M', 'HH', 'H', 'GGGG', 'GG', 'E', 'Do', 'DDDo', 'DDDD', 'DDD', 'DD', 'D', 'A'];\n/**\n * @name buildTokensRegExp\n * @category Locale Helpers\n * @summary Build `formattingTokensRegExp` or `parsingTokensRegExp` property for locale.\n *\n * @description\n * Build `formattingTokensRegExp` or `parsingTokensRegExp` property for locales.\n * Takes `formatters` or `parsers` property respectively (if there's one for the locale).\n * Resulting RegExp is used to split the `format` or `parse` token string into tokens.\n *\n * @param {Object} tokensObject - `formatters` or `parsers` property of the locale\n * @returns {RegExp} `formattingTokensRegExp` or `parsingTokensRegExp` property of the locale\n *\n * @example\n * locale.formatters = {\n *   YYYYY: function (date, options) {\n *     var year = date.getUTCFullYear\n *     if (year > 0) {\n *       return year + 'A.D.'\n *     } else {\n *       return year + 'B.C.'\n *     }\n *   }\n * }\n * locale.formattingTokensRegExp = buildTokensRegExp(locale.formatters)\n */\n\nexport default function buildTokensRegExp(tokensObject) {\n  var tokenKeys = [];\n\n  for (var key in tokensObject) {\n    if (tokensObject.hasOwnProperty(key)) {\n      tokenKeys.push(key);\n    }\n  }\n\n  var tokens = commonTokenKeys.concat(tokenKeys).sort().reverse();\n  var tokensRegExp = new RegExp('(\\\\[[^\\\\[]*\\\\])|(\\\\\\\\)?' + '(' + tokens.join('|') + '|.)', 'g');\n  return tokensRegExp;\n}","map":null,"metadata":{},"sourceType":"module"}