{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = differenceInDays;\n\nvar _index = require('../toDate/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('../differenceInCalendarDays/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _index5 = require('../compareAsc/index.js');\n\nvar _index6 = _interopRequireDefault(_index5);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full days between the given dates.\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the number of full days\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n */\n\n\nfunction differenceInDays(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeft = (0, _index2.default)(dirtyDateLeft, dirtyOptions);\n  var dateRight = (0, _index2.default)(dirtyDateRight, dirtyOptions);\n  var sign = (0, _index6.default)(dateLeft, dateRight, dirtyOptions);\n  var difference = Math.abs((0, _index4.default)(dateLeft, dateRight, dirtyOptions));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = (0, _index6.default)(dateLeft, dateRight, dirtyOptions) === -sign;\n  return sign * (difference - isLastDayNotFull);\n}\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}